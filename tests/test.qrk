(import "std:prelude.qrk")
(import "std:classes/monad.qrk")
(import "std:classes/bifunctor.qrk")
(import "std:modules/state.qrk")

(data Bytecode [
  (PUSH int)
  POP
  ADD
])
(defn push [x] (do
  (<- xs state:get)
  (state:put (Cons x xs))
))

(let pop (do
  (<- x state:get)
  (match x
    [(Cons y xs) (>> (state:put xs) (return y))]
    [Nil (error "Cannot pop")])
))

(defn runBytecode [bytecode] (match bytecode 
  [[(PUSH x) *xs] (>> (push x) (runBytecode xs))]
  [[ADD *xs] (do
    (<- x pop)
    (<- y pop)
    (push (+ x y))
    (runBytecode xs)
  )]
  [Nil (return ())]))

(let main (fn [] {
  (let bytecode [(PUSH 5) (PUSH 10) ADD])
  (let (Tuple r a) (runState (runBytecode bytecode) []))
  (print r)
  (print a)
  (print args)
}))