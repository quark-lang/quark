(defm defn [name args body]
  (let name (fn args body)))
(data (List a) [
  Nil
  (Cons a (List a))
])

(defn ++ [a b] (match a
  [Nil b]
  [(Cons x xs) (Cons x (++ xs b))]))
(class (Show a) [
  (declare show (-> a str))
])

(instance [] (Show char) [
  (let show (fn [c] (Cons c Nil)))
])

(instance [] (Show int) [
  (let show (fn [x] "test"))
])

(instance [(Show a)] (Show (List a)) [
  (let show (fn [x] (match x 
    [Nil ""]
    [(Cons y xs) (++ (show y) (show xs))])))
])


(let main (fn [] {
  (show "test")
}))