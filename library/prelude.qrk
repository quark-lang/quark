(data (List a) [
  Nil
  (Cons a (List a))
])

(defn ++ [a b] (match a
  [Nil b]
  [(Cons x xs) (Cons x (++ xs b))]))

(defm defn [name args body]
  (let name (fn args body)))

(import "std:types/expression.qrk")

; CORE IMPORTS
(import "std:modules/math.qrk")
(import "std:modules/io.qrk")
(import "std:modules/color.qrk")

(import "std:types/bool.qrk")
(import "std:types/maybe.qrk")
(import "std:types/list.qrk")
(import "std:types/tuple.qrk")
(import "std:types/map.qrk")
(import "std:types/string.qrk")