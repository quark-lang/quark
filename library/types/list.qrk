(import "std:modules/math.qrk")
(import "std:types/maybe.qrk")

(let list:empty Nil)

(defn list:length [x] (match x
  [Nil 0]
  [(Cons _ xs) (+ 1 (list:length xs))]))

(defn list:show [fmt xs] {
  (defn f [lst] (match lst
    [[] ""]
    [[x *xs] (++ (fmt x) (++ (if (= (list:length xs) 0) "" ", ") (f xs)))]
  ))
  (++ "[" (++ (f xs) "]"))
})

(declare (fromList a b) (-> a [b]))
(defn fromList [ls] 
  (condition (binary (property ls "length") "===" 0)
    Nil
    (let x (index ls 0)
      (let xs (call (property ls "slice") 1)
        (Cons x (fromList xs))))))

(defn list:drop [n ls] (match ls
  [(Cons _ xs) (if (= n 1) xs (list:drop (- n 1) xs))]
  [Nil Nil]))

(defn list:map [f list] (match list
  [Nil Nil]
  [(Cons x xs) (Cons (f x) (list:map f xs))]))

(defn list:iter [f x] (let _ (list:map f x) 0))

(defn list:at [x i] (match x
  [[] Nothing]
  [[y *xs] (if (= i 0) (Just y) (list:at xs (- i 1)))]))

(defn list:filter [pred list] (match list
  [Nil Nil]
  [(Cons x xs) (if (pred x) (Cons x (list:filter pred xs)) (list:filter pred xs))]))

(defn list:foldl [f init ls] (match ls 
  [Nil init]
  [(Cons x xs) (list:foldl f (f init x) xs)]))

(let list:sum (list:foldl + 0))
(let list:product (list:foldl * 1))

(defn list:range [from to] (if (= from to) (Cons from Nil) (Cons from (list:range (+ from 1) to))))


(defn : [a b] (Cons a b))

(defn elem [x ls] (> (list:length (list:filter (fn [y] (= y x)) ls)) 0))