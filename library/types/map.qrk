(data (Map k a) [
  Empty
  (Insert k a (Map k a))
])

(defn map:insert [k a map] (Insert k a map))

(defn map:length [map] (match map
  [Empty 0]
  [(Insert _ _ m) (+ 1 (map:length m))]))

(let map:empty Empty)

(defn map:filter [pred map] (match map
  [Empty Empty]
  [(Insert k a m) (if (pred k) (map:insert k a (map:filter pred m)) (map:filter pred map))]))

(defn map:map [f map] (match map
  [Empty Empty]
  [(Insert k a m) (map:insert k (f a) (map:map f m))]))

(defn map:iter [f map] (let _ (map:map f map) 0))

(defn map:show [fk fv map] {
  (defn f [m'] (match m'
    [Empty ""]
    [(Insert k a m) {
      (let x (fk k))
      (let y (fv a))
      (++ x (++ " => " (++ y (++ (if (= (map:length m) 0) "" ", ") (f m)))))
    }]
  ))
  (++ "{ " (++ (f map) " }"))
})